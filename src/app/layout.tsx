import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Providers } from "@/components/providers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  metadataBase: new URL('https://culinaryai-chef.vercel.app'),
  title: {
    default: "CulinaryAI Chef - AI-Powered Recipe Generator",
    template: "%s | CulinaryAI Chef"
  },
  description: "Discover personalized recipes generated by AI based on your dietary preferences and available ingredients. Get custom meal plans, cooking tips, and dietary-specific recipes.",
  keywords: [
    "AI recipes",
    "recipe generator",
    "dietary recipes",
    "cooking AI",
    "meal planning",
    "personalized recipes",
    "healthy recipes",
    "vegan recipes",
    "gluten-free recipes"
  ],
  authors: [{ name: "CulinaryAI Chef Team" }],
  creator: "CulinaryAI Chef",
  openGraph: {
    type: "website",
    locale: "en_US",
    url: "https://culinaryai-chef.vercel.app",
    siteName: "CulinaryAI Chef",
    title: "CulinaryAI Chef - AI-Powered Recipe Generator",
    description: "Discover personalized recipes generated by AI based on your dietary preferences and available ingredients.",
    images: [
      {
        url: "https://images.unsplash.com/photo-1506368249639-73a05d6f6488?w=1200&h=630&fit=crop",
        width: 1200,
        height: 630,
        alt: "CulinaryAI Chef - Fresh ingredients and AI-powered cooking",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "CulinaryAI Chef - AI-Powered Recipe Generator",
    description: "Discover personalized recipes generated by AI based on your dietary preferences.",
    images: ["https://images.unsplash.com/photo-1506368249639-73a05d6f6488?w=1200&h=630&fit=crop"],
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-video-preview": -1,
      "max-image-preview": "large",
      "max-snippet": -1,
    },
  },
  verification: {
    google: "your-google-verification-code", // Replace with actual verification code
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
